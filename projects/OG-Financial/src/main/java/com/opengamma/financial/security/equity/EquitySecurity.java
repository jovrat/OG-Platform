/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.security.equity;

import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.financial.security.FinancialSecurity;
import com.opengamma.financial.security.FinancialSecurityVisitor;
import com.opengamma.util.money.Currency;

/**
 * A security for equities.
 */
@BeanDefinition
public class EquitySecurity extends FinancialSecurity {

  /** Serialization version. */
  private static final long serialVersionUID = 1L;

  /**
   * The security type.
   */
  public static final String SECURITY_TYPE = "EQUITY";

  /**
   * The short name.
   */
  @PropertyDefinition
  private String _shortName;
  /**
   * The exchange.
   */
  @PropertyDefinition(validate = "notNull")
  private String _exchange;
  /**
   * The exchange code.
   */
  @PropertyDefinition(validate = "notNull")
  private String _exchangeCode;
  /**
   * The company name.
   */
  @PropertyDefinition(validate = "notNull")
  private String _companyName;
  /**
   * The currency.
   */
  @PropertyDefinition(validate = "notNull")
  private Currency _currency;
  /**
   * The GICS code.
   */
  @PropertyDefinition
  private GICSCode _gicsCode;

  EquitySecurity() { //For builder
    super(SECURITY_TYPE);
  }

  public EquitySecurity(String exchange, String exchangeCode, String companyName, Currency currency) {
    super(SECURITY_TYPE);
    setExchange(exchange);
    setExchangeCode(exchangeCode);
    setCompanyName(companyName);
    setCurrency(currency);
  }

  //-------------------------------------------------------------------------
  @Override
  public final <T> T accept(FinancialSecurityVisitor<T> visitor) {
    return visitor.visitEquitySecurity(this);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code EquitySecurity}.
   * @return the meta-bean, not null
   */
  public static EquitySecurity.Meta meta() {
    return EquitySecurity.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(EquitySecurity.Meta.INSTANCE);
  }

  @Override
  public EquitySecurity.Meta metaBean() {
    return EquitySecurity.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -2028219097:  // shortName
        return getShortName();
      case 1989774883:  // exchange
        return getExchange();
      case 1429202608:  // exchangeCode
        return getExchangeCode();
      case -508582744:  // companyName
        return getCompanyName();
      case 575402001:  // currency
        return getCurrency();
      case 762040799:  // gicsCode
        return getGicsCode();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -2028219097:  // shortName
        setShortName((String) newValue);
        return;
      case 1989774883:  // exchange
        setExchange((String) newValue);
        return;
      case 1429202608:  // exchangeCode
        setExchangeCode((String) newValue);
        return;
      case -508582744:  // companyName
        setCompanyName((String) newValue);
        return;
      case 575402001:  // currency
        setCurrency((Currency) newValue);
        return;
      case 762040799:  // gicsCode
        setGicsCode((GICSCode) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_exchange, "exchange");
    JodaBeanUtils.notNull(_exchangeCode, "exchangeCode");
    JodaBeanUtils.notNull(_companyName, "companyName");
    JodaBeanUtils.notNull(_currency, "currency");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      EquitySecurity other = (EquitySecurity) obj;
      return JodaBeanUtils.equal(getShortName(), other.getShortName()) &&
          JodaBeanUtils.equal(getExchange(), other.getExchange()) &&
          JodaBeanUtils.equal(getExchangeCode(), other.getExchangeCode()) &&
          JodaBeanUtils.equal(getCompanyName(), other.getCompanyName()) &&
          JodaBeanUtils.equal(getCurrency(), other.getCurrency()) &&
          JodaBeanUtils.equal(getGicsCode(), other.getGicsCode()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getShortName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getExchange());
    hash += hash * 31 + JodaBeanUtils.hashCode(getExchangeCode());
    hash += hash * 31 + JodaBeanUtils.hashCode(getCompanyName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getCurrency());
    hash += hash * 31 + JodaBeanUtils.hashCode(getGicsCode());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the short name.
   * @return the value of the property
   */
  public String getShortName() {
    return _shortName;
  }

  /**
   * Sets the short name.
   * @param shortName  the new value of the property
   */
  public void setShortName(String shortName) {
    this._shortName = shortName;
  }

  /**
   * Gets the the {@code shortName} property.
   * @return the property, not null
   */
  public final Property<String> shortName() {
    return metaBean().shortName().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the exchange.
   * @return the value of the property, not null
   */
  public String getExchange() {
    return _exchange;
  }

  /**
   * Sets the exchange.
   * @param exchange  the new value of the property, not null
   */
  public void setExchange(String exchange) {
    JodaBeanUtils.notNull(exchange, "exchange");
    this._exchange = exchange;
  }

  /**
   * Gets the the {@code exchange} property.
   * @return the property, not null
   */
  public final Property<String> exchange() {
    return metaBean().exchange().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the exchange code.
   * @return the value of the property, not null
   */
  public String getExchangeCode() {
    return _exchangeCode;
  }

  /**
   * Sets the exchange code.
   * @param exchangeCode  the new value of the property, not null
   */
  public void setExchangeCode(String exchangeCode) {
    JodaBeanUtils.notNull(exchangeCode, "exchangeCode");
    this._exchangeCode = exchangeCode;
  }

  /**
   * Gets the the {@code exchangeCode} property.
   * @return the property, not null
   */
  public final Property<String> exchangeCode() {
    return metaBean().exchangeCode().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the company name.
   * @return the value of the property, not null
   */
  public String getCompanyName() {
    return _companyName;
  }

  /**
   * Sets the company name.
   * @param companyName  the new value of the property, not null
   */
  public void setCompanyName(String companyName) {
    JodaBeanUtils.notNull(companyName, "companyName");
    this._companyName = companyName;
  }

  /**
   * Gets the the {@code companyName} property.
   * @return the property, not null
   */
  public final Property<String> companyName() {
    return metaBean().companyName().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the currency.
   * @return the value of the property, not null
   */
  public Currency getCurrency() {
    return _currency;
  }

  /**
   * Sets the currency.
   * @param currency  the new value of the property, not null
   */
  public void setCurrency(Currency currency) {
    JodaBeanUtils.notNull(currency, "currency");
    this._currency = currency;
  }

  /**
   * Gets the the {@code currency} property.
   * @return the property, not null
   */
  public final Property<Currency> currency() {
    return metaBean().currency().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the GICS code.
   * @return the value of the property
   */
  public GICSCode getGicsCode() {
    return _gicsCode;
  }

  /**
   * Sets the GICS code.
   * @param gicsCode  the new value of the property
   */
  public void setGicsCode(GICSCode gicsCode) {
    this._gicsCode = gicsCode;
  }

  /**
   * Gets the the {@code gicsCode} property.
   * @return the property, not null
   */
  public final Property<GICSCode> gicsCode() {
    return metaBean().gicsCode().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code EquitySecurity}.
   */
  public static class Meta extends FinancialSecurity.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code shortName} property.
     */
    private final MetaProperty<String> _shortName = DirectMetaProperty.ofReadWrite(
        this, "shortName", EquitySecurity.class, String.class);
    /**
     * The meta-property for the {@code exchange} property.
     */
    private final MetaProperty<String> _exchange = DirectMetaProperty.ofReadWrite(
        this, "exchange", EquitySecurity.class, String.class);
    /**
     * The meta-property for the {@code exchangeCode} property.
     */
    private final MetaProperty<String> _exchangeCode = DirectMetaProperty.ofReadWrite(
        this, "exchangeCode", EquitySecurity.class, String.class);
    /**
     * The meta-property for the {@code companyName} property.
     */
    private final MetaProperty<String> _companyName = DirectMetaProperty.ofReadWrite(
        this, "companyName", EquitySecurity.class, String.class);
    /**
     * The meta-property for the {@code currency} property.
     */
    private final MetaProperty<Currency> _currency = DirectMetaProperty.ofReadWrite(
        this, "currency", EquitySecurity.class, Currency.class);
    /**
     * The meta-property for the {@code gicsCode} property.
     */
    private final MetaProperty<GICSCode> _gicsCode = DirectMetaProperty.ofReadWrite(
        this, "gicsCode", EquitySecurity.class, GICSCode.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
      this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "shortName",
        "exchange",
        "exchangeCode",
        "companyName",
        "currency",
        "gicsCode");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -2028219097:  // shortName
          return _shortName;
        case 1989774883:  // exchange
          return _exchange;
        case 1429202608:  // exchangeCode
          return _exchangeCode;
        case -508582744:  // companyName
          return _companyName;
        case 575402001:  // currency
          return _currency;
        case 762040799:  // gicsCode
          return _gicsCode;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends EquitySecurity> builder() {
      return new DirectBeanBuilder<EquitySecurity>(new EquitySecurity());
    }

    @Override
    public Class<? extends EquitySecurity> beanType() {
      return EquitySecurity.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code shortName} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> shortName() {
      return _shortName;
    }

    /**
     * The meta-property for the {@code exchange} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> exchange() {
      return _exchange;
    }

    /**
     * The meta-property for the {@code exchangeCode} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> exchangeCode() {
      return _exchangeCode;
    }

    /**
     * The meta-property for the {@code companyName} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> companyName() {
      return _companyName;
    }

    /**
     * The meta-property for the {@code currency} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Currency> currency() {
      return _currency;
    }

    /**
     * The meta-property for the {@code gicsCode} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<GICSCode> gicsCode() {
      return _gicsCode;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
