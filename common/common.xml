<project name="common" xmlns:ivy="antlib:org.apache.ivy.ant">
	
	<!-- Load the environment variables first -->
	<property environment="env" />
	<!-- also, try a property file because some JVMs don't support env properly -->
	<property file="${user.home}/.OG-Build-common.properties" />

	<!-- Set where the OGDEV dir is. We do this outside build.properties so that
       we can reference it in build.properties. -->
	<property file="${common.dir}/ogdev.properties"/>
	<condition property="ogdev.dir" value="${ogdev.dir.windows}" else="${ogdev.dir.posix}">
		<os family="windows" />
	</condition>

	<!-- project defaults -->
	<property file="${common.dir}/build.properties" />

	<!-- REVIEW kirk 2010-04-29 - I believe this can be changed to reference ogdev.dir, but I don't want to
       break everybody's settings. -->
	<condition property="env.IVY_SHARED_DEFAULT_ROOT_DEFAULT" value="${env.IVY_SHARED_DEFAULT_ROOT_WINDOWS}" else="${env.IVY_SHARED_DEFAULT_ROOT_NONWINDOWS}">
		<os family="windows" />
	</condition>
	<condition property="env.IVY_SHARED_DEFAULT_ROOT" value="${env.IVY_SHARED_DEFAULT_ROOT_DEFAULT}">
		<not>
			<isset property="env.IVY_SHARED_DEFAULT_ROOT" />
		</not>
	</condition>

	<!-- location of test properties can be overridden with TEST_PROPERTIES_DIR, defaults to OG-Platform/common
         this should probably be replaced using the "ant init" mechanism to keep the file location the same and
         overwrite with different versions -->
	<condition property="test.properties.dir" value="${env.TEST_PROPERTIES_DIR}" else="${common.dir}">
		<isset property="env.TEST_PROPERTIES_DIR"/>
	</condition>
	<condition property="test.properties" value="${env.TEST_PROPERTIES}" else="tests.properties">
		<isset property="env.TEST_PROPERTIES"/>
	</condition>

	<property name="ivy.jar.dir" value="${user.home}/.ivy2/jars" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
	<available file="${ivy.jar.file}" property="skip.download"/>

	<!-- Use the DSA SSH private key if found, otherwise use the RSA key.
     If your private key is not in ~/.ssh, or is named in a non-standard way, you
     will need to set the ssh.private.key property manually in build.properties. -->
	<available file="${user.home}/.ssh/id_rsa" property="ssh.private.key" value="${user.home}/.ssh/id_rsa"/>
	<available file="${user.home}/.ssh/id_dsa" property="ssh.private.key" value="${user.home}/.ssh/id_dsa"/>

	<import file="common-ivy.xml"/>

	<target name="report" depends="resolve"
    description="generates a report of dependencies">
		<ivy:report todir="${build.dir}" />
	</target>

	<target name="compile" depends="compile-src"
    description="compile all source code" />

	<target name="fudge-proto-present" depends="resolve">
		<available classname="org.fudgemsg.proto.AntTask" classpathref="lib.path.id" property="fudge.proto.present" />
	</target>

	<target name="fudge-proto-compile" if="fudge.proto.present" depends="fudge-proto-present">
		<taskdef name="fudgeproto" classname="org.fudgemsg.proto.AntTask" classpathref="lib.path.id" />
		<fudgeproto
        srcdir="${src.dir}"
        destdir="${src.dir}"
        searchdir="${toString:lib.path.id}"
        equals="${fudge.proto.equals}"
        toString="${fudge.proto.toString}"
        hashCode="${fudge.proto.hashCode}"
        verbose="${build.verbose}"
        fudgeContext="${fudge.proto.fudgeContext}"
        rebuildAll="${fudge.proto.rebuildAll}">
			<exclude name="*Security.proto" />
			<exclude name="*FinancialSecurity.proto" />
			<exclude name="*ExerciseType.proto" />
			<exclude name="*OptionType.proto" />
			<exclude name="*PayoffStyle.proto" />
			<exclude name="*SwapLeg.proto" />
			<exclude name="*Notional.proto" />
			<fileHeader>///CLOVER:OFF
// CSOFF: Generated File</fileHeader>
			<fileFooter>///CLOVER:ON
// CSON: Generated File</fileFooter>
		</fudgeproto>
		<fixcrlf preservelastmodified="true" srcdir="${src.dir}">
			<include name="**/*.java"/>
		</fixcrlf>
	</target>

	<target name="fudge-proto" depends="fudge-proto-compile" 
    description="compile any Fudge .proto files">
	</target>

	<target name="joda-bean-present">
		<available classname="org.joda.beans.gen.BeanCodeGen" classpathref="lib.path.id" property="joda.bean.present" />
	</target>

	<!-- builds the Joda-Bean files -->
	<target name="joda-bean" depends="joda-bean-present" if="joda.bean.present">
		<java classname="org.joda.beans.gen.BeanCodeGen" classpathref="lib.path.id" fork="true" failonerror="true">
			<arg value="-R" />
			<arg value="-indent=2" />
			<arg value="-prefix=_" />
			<arg value="${src.dir}" />
		</java>
	</target>

	<target name="compile-src" depends="fudge-proto"
    description="compile the main project files">
		<mkdir dir="${classes.dir}" />

		<javac srcdir="${src.dir}" destdir="${classes.dir}"
      classpath="${lib.path.jar.file}" debug="${build.debug}" optimize="${build.optimize}"
      source="${build.javac.source}" target="${build.javac.target}"
      memoryMaximumSize="512M" fork="true"
      verbose="${build.verbose}" listfiles="${build.listfiles}" />
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
    <copy todir="${classes.dir}" includeemptydirs="false" failonerror="false">
      <fileset dir="${src.resources.dir}" />
    </copy>
	</target>

	<!-- build Javadocs for the project -->
	<target name="javadoc" depends="load-ivy">
		<mkdir dir="${docs.dir}" />
		<mkdir dir="${docs.dir}/javadoc" />
		<javadoc sourcepath="${src.dir}" destdir="${docs.dir}/javadoc"
      classpathref="lib.path.id.full" author="false" windowtitle="${javadocs.windowtitle}"
      doctitle="${javadocs.doctitle}" bottom="${javadocs.footer}">
			<link href="http://download.oracle.com/javase/6/docs/api/" />
			<link href="http://dist.fudgemsg.org/java/javadoc/0.2/" />
			<link href="http://threeten.sourceforge.net/apidocs/" />
			<link href="http://joda-beans.sourceforge.net/apidocs/" />
		</javadoc>
	</target>

	<!-- copies appropriate files up to top level -->
	<target name="javadoc-copyup" depends="load-ivy" />

  <!-- build Javadocs for public APIs and SPIs of the project -->
	<target name="javadoc-public" depends="load-ivy">
		<mkdir dir="${docs.dir}" />
		<mkdir dir="${docs.dir}/javadoc-public" />
		<mkdir dir="${docs.dir}/temp-src" />
		<copy toDir="${docs.dir}/temp-src">
			<fileset dir="${src.dir}" includes="**/*.java">
				<contains text="@PublicAPI" casesensitive="yes"/>
			</fileset>
			<fileset dir="${src.dir}" includes="**/*.java">
				<contains text="@PublicSPI" casesensitive="yes"/>
			</fileset>
		</copy>
		<javadoc sourcepath="${docs.dir}/temp-src" destdir="${docs.dir}/javadoc-public"
      classpathref="lib.path.id" author="false" windowtitle="${javadocs.windowtitle}"
      doctitle="${javadocs.doctitle}" bottom="${javadocs.footer}">
		</javadoc>
	</target>

	<target name="compile-tests-mkdir">
		<mkdir dir="${tests.classes.dir}" />
		<path id="tests.build.classpath.id">
			<pathelement path="${lib.path.jar.file}" />
			<pathelement path="${classes.dir}" />
		</path>
	</target>

	<target name="compile-tests-main" depends="compile-tests-mkdir">
		<javac srcdir="${tests.src.dir}" destdir="${tests.classes.dir}"
      classpathref="tests.build.classpath.id" debug="${build.debug}"
      source="${build.javac.source}" target="${build.javac.target}"
      memoryMaximumSize="512M" fork="true"
      optimize="${build.optimize}" verbose="${build.verbose}" listfiles="${build.listfiles}" />
	</target>

	<available property="tests.interop" file="${tests.dir}/interop" />

	<target name="compile-tests-interop" depends="compile-tests-mkdir" if="tests.interop">
		<javac srcdir="${tests.dir}/interop" destdir="${tests.classes.dir}"
      classpathref="tests.build.classpath.id" debug="${build.debug}"
      source="${build.javac.source}" target="${build.javac.target}"
      memoryMaximumSize="512M" fork="true"
      optimize="${build.optimize}" verbose="${build.verbose}" listfiles="${build.listfiles}" />
	</target>

	<target name="compile-tests" depends="compile-tests-main,compile-tests-interop" description="compile the tests">
		<copy todir="${tests.classes.dir}">
			<fileset dir="${tests.src.dir}">
				<exclude name="**/*.java" />
			</fileset>
			<fileset dir="${tests.dir}/interop" erroronmissingdir="false">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
    <copy todir="${tests.classes.dir}" includeemptydirs="false" failonerror="false">
      <fileset dir="${tests.resources.dir}" />
    </copy>
	</target>

	<!-- ================================================================ -->
	<!--property name="test.database.type" value="all"/-->
	<!-- hsqldb, postgres, all. -->
	<property name="test.database.previousVersions" value="1"/>
	<!-- number of previous versions to test upgrade scripts from -->

	<target name="tests" depends="test-batch-clean,test-batch,junit-report" description="run unit tests and generate report"/>

  <!-- convenience redeclaration for typos and maven users -->
  <target name="test" depends="tests" />

	<target name="test-batch" depends="junit-batch,testng-batch"/>

	<target name="test-batch-clean">
		<delete dir="${tests.junit.dir}/junitreports" includeemptydirs="true" failonerror="false" />
		<delete dir="${tests.junit.dir}/xml" includeemptydirs="true" failonerror="false" />
		<delete dir="${tests.junit.dir}/html" includeemptydirs="true" failonerror="false" />
	</target>

	<target name="junit-batch" depends="compile-tests" unless="testng">
		<mkdir dir="${tests.junit.dir}/xml" />
		<!-- if junit.logback defines a class, use that as an arg to the JVM for logging. Otherwise, create a dummy arg (-Dcom.opengamma.ogbuild=0) -->
		<condition property="junit.logback.jvmarg" value="-Dlogback.configurationFile=${junit.logback}">
			<isset property="junit.logback" />
		</condition>
		<property name="junit.logback.jvmarg" value="-Dcom.opengamma.ogbuild=0" />
		<junit printSummary="true" fork="true" forkmode="once" maxmemory="${junit.maxheap}" dir="${basedir}">
			<classpath>
				<path refid="lib.path.id" />
				<!-- pathelement path="${lib.path.jar.file}" /-->
				<pathelement path="${classes.dir}" />
				<pathelement path="${tests.classes.dir}" />
				<pathelement path="${config.dir}" />
				<pathelement path="${clover.jar.file}" />
				<pathelement path="${test.properties.dir}" />
			</classpath>
			<jvmarg value="${junit.logback.jvmarg}" />
			<assertions>
				<enable />
			</assertions>
			<formatter type="xml" />
			<batchtest todir="${tests.junit.dir}/xml">
				<fileset dir="${tests.src.dir}" includes="**/*Test.java" excludes="**/Abstract*" />
				<fileset dir="${tests.dir}/interop" includes="**/*Test.java" erroronmissingdir="false" />
			</batchtest>
			<sysproperty key="user.name" value="${user.name}" />
			<!-- Read in TestProperties.java -->
			<sysproperty key="test.properties" value="${test.properties}"/>
			<sysproperty key="test.properties.dir" value="${test.properties.dir}"/>
			<!-- Read in TestProperties.java -->
			<sysproperty key="test.database.type" value="${test.database.type}"/>
			<!-- Read in DbTest.java -->
			<sysproperty key="test.database.previousVersions" value="${test.database.previousVersions}"/>
			<!-- Read in DbTest.java -->
			<sysproperty key="disable.instrumentation.sensitive" value="${clover.installed}" />
		</junit>
	</target>

	<target name="junit-report" depends="junit-batch" >
		<mkdir dir="${tests.junit.dir}/html" />
		<mkdir dir="${tests.junit.dir}/xml" />
		<junitreport todir="${tests.junit.dir}/xml">
			<fileset dir="${tests.junit.dir}/xml" includes="TEST-*.xml" />
			<report todir="${tests.junit.dir}/html" />
		</junitreport>
	</target>

	<target name="cp-with-resource" if="resourceDir.present">
		<path id="testng.run.path">
			<path refid="lib.path.id" />
			<path refid="resource.path.id" />
			<fileset dir="${lib.dir}/jar/org.apache.ant/ant" includes="*.jar" />
			<pathelement path="${classes.dir}" />
			<pathelement path="${tests.classes.dir}" />
			<pathelement path="${config.dir}" />
			<pathelement path="${clover.jar.file}" />
			<pathelement path="${test.properties.dir}" />
		</path>
	</target>

	<target name="cp-without-resource" unless="resourceDir.present">
		<path id="testng.run.path">
			<path refid="lib.path.id" />
			<fileset dir="${lib.dir}/jar/org.apache.ant/ant" includes="*.jar" />
			<pathelement path="${classes.dir}" />
			<pathelement path="${tests.classes.dir}" />
			<pathelement path="${config.dir}" />
			<pathelement path="${clover.jar.file}" />
			<pathelement path="${test.properties.dir}" />
		</path>
	</target>

	<target name="build-testng-cp" depends="cp-with-resource, cp-without-resource" />

	<target name="check-resource">
		<available property="resourceDir.present" file="${lib.dir}/resource" type="dir"/>
	</target>

	<target name="testng-batch" depends="compile-tests, check-resource, build-testng-cp" if="testng">

		<taskdef resource="testngtasks" classpathref="lib.path.id" />

		<property file="${common.dir}/tests.properties" />
		<!-- if junit.logback defines a class, use that as an arg to the JVM for logging. Otherwise, create a dummy arg (-Dcom.opengamma.ogbuild=0) -->
		<condition property="junit.logback.jvmarg" value="-Dlogback.configurationFile=${junit.logback}">
			<isset property="junit.logback" />
		</condition>
		<property name="junit.logback.jvmarg" value="-Dcom.opengamma.ogbuild=0" />
		<testng suitename="Ant tests for ${ant.project.name}" outputdir="${tests.junit.dir}"
                        groups="${tests.testng.includedgroups}"
                        excludedgroups="${tests.testng.exludedgroups}" workingDir="${basedir}"
                        classpathref="testng.run.path" parallel="${tests.testng.parallel}"
                        threadCount="${tests.testng.threads}" timeOut="${tests.testng.timeout}">

			<classfileset dir="${tests.classes.dir}" includes="${tests.classes.pattern}" excludes="**/Abstract*" />
			<jvmarg value="${junit.logback.jvmarg}" />
			<jvmarg value="-Xmx${junit.maxheap}" />
			<jvmarg value="-XX:MaxPermSize=${junit.maxpermgen}" />
			<sysproperty key="user.name" value="${user.name}" />
			<!-- Read in TestProperties.java -->
			<sysproperty key="test.properties" value="${test.properties}" />
			<sysproperty key="test.properties.dir" value="${test.properties.dir}" />
			<!-- Read in TestProperties.java -->
			<sysproperty key="test.database.type" value="${test.database.type}" />
			<!-- Read in DbTest.java -->
			<sysproperty key="test.database.previousVersions" value="${test.database.previousVersions}" />
			<!-- Read in DbTest.java -->
			<sysproperty key="disable.instrumentation.sensitive" value="${clover.installed}" />
		</testng>
		<move file="${tests.junit.dir}/junitreports" tofile="${tests.junit.dir}/xml" failonerror="false"/>
		<!--mkdir dir="${tests.junit.dir}/html" />
    <junitreport todir="${tests.junit.dir}/xml">
      <fileset dir="${tests.junit.dir}/xml" includes="TEST-*.xml" />
      <report todir="${tests.junit.dir}/html" />
    </junitreport-->
	</target>

	<!-- ================================================================ -->
	<target name="run" depends="version, compile" description="compile and run the project">
		<java classpathref="run.path.id" classname="${main.class.name}" />
	</target>

	<target name="ivy-new-version" depends="load-ivy" unless="ivy.new.revision">
		<!-- default module version prefix value -->
		<property name="module.version.prefix" value="${module.version.target}-dev-b" />

		<!-- asks to ivy an available version number -->
		<ivy:info file="${ivy.file}" />
		<ivy:buildnumber organisation="${ivy.organisation}"
      module="${ivy.module}" revision="${module.version.prefix}"
      defaultBuildNumber="1" revSep="" />
	</target>

	<target name="local-version">
		<tstamp>
			<format property="now" pattern="yyyyMMddHHmmss" />
		</tstamp>
		<property name="ivy.new.revision" value="${module.version.target}-local-${now}" />
	</target>

	<target name="version" depends="ivy-new-version">
		<!-- create version file in classpath for later inclusion in jar -->
		<mkdir dir="${classes.dir}" />
		<echo message="version=${ivy.new.revision}" file="${classes.dir}/${ant.project.name}.properties"
      append="false" />

		<!-- load generated version properties file -->
		<property file="${classes.dir}/${ant.project.name}.properties" />
	</target>

	<target name="manifest" depends="version">
		<manifest file="${basedir}/MANIFEST.MF" mode="update">
			<attribute name="Built-By" value="${user.name}" />
			<attribute name="Build-Version" value="${version}" />
			<attribute name="Main-Class" value="${main.class.name}" />
		</manifest>
	</target>

	<target name="jar" depends="manifest, compile"
    description="make a jar file for this project">
		<jar destfile="${jar.file}" manifest="${basedir}/MANIFEST.MF">
			<fileset dir="${classes.dir}" />
		</jar>
	</target>

	<target name="src-jar" depends="version"
    description="make a source jar file for this project">
		<jar destfile="${src.jar.file}" compress="${jar.compress}">
			<fileset dir="${src.dir}" excludes="**/*.class" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Build-Version" value="${version}" />
			</manifest>
		</jar>
	</target>

	<!-- 
	         =================================================================== 
	            Creates javadocs documentation for this project              
	         =================================================================== 
	 -->
	<target name="docs" description="builds all docs &amp; archive for this project">
		<antcall target="javadoc-public-jar"></antcall>
		<antcall target="javadoc-jar"></antcall>
	</target>
	
	<!-- make a javadoc jar file for this project -->
	<target name="javadoc-jar" depends="version, javadoc">
		<jar destfile="${javadocs.jar.file}" basedir="${docs.dir}/javadoc"
      compress="${jar.compress}" />
	</target>

	<!-- make a javadoc-public jar file for this project -->
	<target name="javadoc-public-jar" depends="version, javadoc-public">
		<jar destfile="${javadocs.jar.file}" basedir="${docs.dir}/javadoc-public"
      compress="${jar.compress}" />
	</target>

	<target name="dist-publish" depends="src-jar, jar">
		<copy file="${src.jar.file}" tofile="${dist.dir}/${ant.project.name}-source.jar" />
		<copy file="${jar.file}" tofile="${dist.dir}/${ant.project.name}-jar.jar" />
	</target>

	<target name="publish" depends="clean-build, dist-publish"
    description="publish this project in the ivy repository">
		<antcall target="dist-publish" />
		<ivy:publish artifactspattern="${dist.dir}/[artifact]-[type].[ext]"
      resolver="shared" pubrevision="${version}" status="release" />
		<echo message="project ${ant.project.name} released with version ${version}" />
	</target>

	<target name="publish-local" depends="local-version, dist-publish">
		<ivy:publish artifactspattern="${dist.dir}/[artifact]-[type].[ext]"
      resolver="local" pubrevision="${version}" pubdate="${now}" status="integration"
      forcedeliver="true" />
		<echo
      message="project ${ant.project.name} published locally with version ${version}" />
	</target>

	<target name="build" description="compile &amp; publish this project in the local ivy repository">
		<antcall target="publish-local"></antcall>
	</target>

	<target name="dist-common">
		<mkdir dir="${dist.dir}" />
		<delete dir="${dist.dir}/${dist.name}" failonerror="false" />
		<mkdir dir="${dist.dir}/${dist.name}" />
		<copy todir="${dist.dir}/${dist.name}" failonerror="false">
			<fileset dir="${basedir}">
				<include name="LICENSE.txt" />
				<include name="README.txt" />
				<include name="ivy.xml" />
				<include name=".classpath" />
				<include name=".project" />
			</fileset>
		</copy>
		<copy todir="${dist.dir}/${dist.name}/config" failonerror="false">
			<fileset dir="${basedir}/config" />
		</copy>
        <copy todir="${dist.dir}/${dist.name}/bin" failonerror="false">
            <fileset dir="${basedir}/bin" />
        </copy>
		<!--
    <copy todir="${dist.dir}/${dist.name}/install" failonerror="false">
      <fileset dir="${basedir}/install" />
    </copy>
    -->
		<copy todir="${dist.dir}/${dist.name}/scripts" failonerror="false">
			<fileset dir="${basedir}/scripts" />
		</copy>
	</target>

	<target name="dist-fixcrlf">
		<fixcrlf srcdir="${dist.dir}/${dist.name}" eol="lf" eof="remove">
			<include name="**/*.properties" />
			<include name="**/*.xml" />
			<include name="**/*.sh" />
			<include name="**/*.txt" />
			<include name="**/*.java" />
			<include name="**/*.proto" />
		</fixcrlf>
		<chmod perm="+x">
			<fileset dir="${dist.dir}/${dist.name}">
				<include name="**/*.sh" />
			</fileset>
		</chmod>
	</target>

	<target name="dist-nodep" depends="dist-common,clean-build,jar">
		<copy todir="${dist.dir}/${dist.name}" file="${jar.file}" />
		<antcall target="dist-fixcrlf" />
	</target>

	<target name="dist" depends="dist-nodep">
		<tar destfile="${dist.dir}/${dist.name}-nodep-${version}.tar" basedir="${dist.dir}">
			<include name="${dist.name}/**/*" />
		</tar>
		<mkdir dir="${dist.dir}/${dist.name}/lib" />
		<ivy:retrieve type="jar,webapp,resource" pattern="${dist.dir}/${dist.name}/lib/[organization]-[module]-[artifact]-[revision].[ext]" />
		<antcall target="dist-fixcrlf" />
    <antcall target="script-gen" />
	</target>
  
  <target name="script-gen">
    <taskdef name="scriptgen" classname="com.opengamma.util.generate.scripts.ScriptsGeneratorTask" classpath="${lib.path.jar.file}" />
      
    <scriptgen scriptDir="${dist.dir}/${dist.name}/scripts" projectName="${ant.project.name}">
    	<fileset dir="${dist.dir}/${dist.name}" includes="**/*.jar"/>
    </scriptgen>
    
    <chmod perm="+x">
      <fileset dir="${dist.dir}/${dist.name}">
        <include name="**/*.sh" />
      </fileset>
    </chmod>
  </target>

	<target name="dist-src-nodep" depends="dist-common,version">
		<copy todir="${dist.dir}/${dist.name}/src">
			<fileset dir="${src.dir}" excludes="**/*.class" />
		</copy>
		<copy todir="${dist.dir}/${dist.name}/tests/unit">
			<fileset dir="${tests.src.dir}" excludes="**/*.class" />
		</copy>
		<antcall target="dist-fixcrlf" />
	</target>

	<target name="dist-src" depends="dist-src-nodep">
		<tar destfile="${dist.dir}/${dist.name}-src-nodep-${version}.tar" basedir="${dist.dir}">
			<tarfileset dir="${dist.dir}" includes="${dist.name}/**/*" excludes="**/*.sh" />
			<tarfileset dir="${dist.dir}" includes="**/*.sh" filemode="755" />
		</tar>
		<mkdir dir="${dist.dir}/${dist.name}/lib" />
		<!-- Fetch the binary dependencies first, in case there aren't source dependencies -->
		<ivy:retrieve type="jar" pattern="${dist.dir}/${dist.name}/lib/[organization]-[module]-[artifact]-[revision].[ext]" />
		<!-- The source dependencies will overwrite the binary ones -->
		<ivy:retrieve type="source,webapp" pattern="${dist.dir}/${dist.name}/lib/[organization]-[module]-[artifact]-[revision].[ext]" />
		<antcall target="dist-fixcrlf" />
	</target>

	<target name="tarball" depends="dist" description="generate a tarball for distribution">
		<gzip src="${dist.dir}/${dist.name}-nodep-${version}.tar" destfile="${dist.dir}/${dist.name}-nodep-${version}.tar.gz" />
		<tar destfile="${dist.dir}/${dist.name}-${version}.tar">
			<tarfileset dir="${dist.dir}" includes="${dist.name}/**/*" excludes="**/*.sh" />
			<tarfileset dir="${dist.dir}" includes="**/*.sh" filemode="755" />
		</tar>
		<gzip src="${dist.dir}/${dist.name}-${version}.tar" destfile="${dist.dir}/${dist.name}-${version}.tar.gz" />
	</target>
	<target name="src-tarball" depends="dist-src" description="generate a source tarball for distribution">
		<gzip src="${dist.dir}/${dist.name}-src-nodep-${version}.tar" destfile="${dist.dir}/${dist.name}-src-nodep-${version}.tar.gz" />
		<tar destfile="${dist.dir}/${dist.name}-src-${version}.tar">
			<tarfileset dir="${dist.dir}" includes="${dist.name}/**/*" excludes="**/*.sh" />
			<tarfileset dir="${dist.dir}" includes="**/*.sh" filemode="755" />
			<include name="${dist.name}/**/*" />
		</tar>
		<gzip src="${dist.dir}/${dist.name}-src-${version}.tar" destfile="${dist.dir}/${dist.name}-src-${version}.tar.gz" />
	</target>

	<target name="zipfile" depends="dist" description="generate a zip file for distribution">
		<mkdir dir="${dist.dir}/tmp" />
		<untar src="${dist.dir}/${dist.name}-nodep-${version}.tar" dest="${dist.dir}/tmp" />
		<zip destfile="${dist.dir}/${dist.name}-nodep-${version}.zip" basedir="${dist.dir}/tmp" />
		<delete dir="${dist.dir}/tmp" />
		<zip destfile="${dist.dir}/${dist.name}-${version}.zip" basedir="${dist.dir}">
			<include name="${dist.name}/**/*" />
		</zip>
	</target>
	<target name="src-zipfile" depends="dist-src" description="generate a source zip file for distribution">
		<mkdir dir="${dist.dir}/tmp" />
		<untar src="${dist.dir}/${dist.name}-src-nodep-${version}.tar" dest="${dist.dir}/tmp" />
		<zip destfile="${dist.dir}/${dist.name}-src-nodep-${version}.zip" basedir="${dist.dir}/tmp" />
		<delete dir="${dist.dir}/tmp" />
		<zip destfile="${dist.dir}/${dist.name}-src-${version}.zip" basedir="${dist.dir}">
			<include name="${dist.name}/**/*" />
		</zip>
	</target>

	<!-- cleans the local repository for the current module -->
	<target name="clean-local" depends="load-ivy">
		<ivy:info file="${ivy.file}" />
		<delete dir="${ivy.local.default.root}/${ivy.organisation}/${ivy.module}" />
		<delete includeemptydirs="true" failonerror="false" dir="${bootstrap.dir}"/>
	</target>

	<!-- clean the project libraries directory (dependencies) -->
	<target name="clean-lib" unless="disable.clean-lib">
    <mkdir dir="${lib.dir}" />
    <!-- failonerror to avoid locked files in Eclipse -->
    <delete dir="${lib.dir}" failonerror="false" />
    <!-- immediately re-make directory to preserve "derived" setting in Eclipse -->
    <mkdir dir="${lib.dir}" />
	</target>

	<!-- clean the project build files -->
	<target name="clean-build">
		<mkdir dir="${build.dir}" />
		<delete includeemptydirs="true">
			<fileset dir="${build.dir}" includes="**/*" excludes="bootstrap/*" />
		</delete>
		<delete includeemptydirs="true" dir="${tests.classes.dir}" />
		<delete includeemptydirs="true" dir="${temp.dir}" />
	</target>

	<!-- clean the project distribution files -->
  <target name="clean-dist">
    <mkdir dir="${dist.dir}" />
    <delete dir="${dist.dir}" />
    <!-- immediately re-make directory to preserve "derived" setting in Eclipse -->
    <mkdir dir="${dist.dir}" />
  </target>

	<!-- clean all test generated files -->
	<target name="clean-tests">
		<delete includeemptydirs="true" failonerror="false" dir="${tests.junit.dir}"/>
	</target>

	<target name="clean" depends="clean-build, clean-lib, clean-dist, clean-tests"
    description="clean the project" />

	<target name="run-hbm2ddl" depends="load-ivy,compile"
    description="generate Hibernate schema from mapping files">
		<taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask"
      classpath="${lib.path.jar.file}" />
		<mkdir dir="${dbscript.dir}" />
		<taskdef name="dbtool" classname="com.opengamma.util.test.DbTool" classpath="${lib.path.jar.file}" />
		<dbtool dbServerHost="${jdbc.url}"
          user="${hibernate.connection.username}"
        password="${hibernate.connection.password}"
        create="true"
          catalog="blank"
        basedir="${basedir}"/>
		<hibernatetool destdir="${dbscript.dir}" >
			<classpath>
				<path location="${classes.dir}" />
				<path location="${tests.classes.dir}" />
			</classpath>
			<configuration configurationfile="hibernate.cfg.xml"  propertyfile="build.properties"/>
			<hbm2ddl format="true" outputfilename="hbm2ddl-create-db.sql" />
		</hibernatetool>
	</target>

	<!-- CLOVER -->
	<import file="${common.dir}/clover-common.xml"/>

	<target name="clover-setup" depends="taskdef-clover, guard-noclover">
		<clover-setup
      initstring="${clover.db.dir}"
    >
			<!--<fileset dir="${src.dir}"/>-->
		</clover-setup>
	</target>

	<target name="clover-html-report" depends="taskdef-clover, guard-noclover">
		<clover-html-report
      initstring="${clover.db.dir}"
      outdir="${clover.html.report.dir}"
      numThreads="1"
    >
		</clover-html-report>
		<clover-report
      initstring="${clover.db.dir}"
      >
			<current outfile="${clover.xml.report.file}">
				<format type="xml"/>
			</current>
		</clover-report>
	</target>

	<target name="tests-with-clover" description="build &amp; run all tests with local Clover reports generated"
    depends="clean, clover-setup, compile, tests, clover-html-report">
	</target>

	<target name="publish-local-with-clover" description="build &amp; run all tests with local Clover reports generated"
    depends="clean, clover-setup, publish-local">
	</target>

	<target name="deploy-dev" depends="upload-dev,kill-dev,extract-dev,start-dev" />

	<target name="upload-dev" depends="zipfile" description="release the code to the dev server">
		<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

		<!-- If you get a FileNotFoundException complaining about ssh.private.key, make sure your
       SSH private key is in the standard location (see the ssh.private.key 'available' commands above). -->

		<!-- If you get an authentication failure, check that your SSH public key has been added to 
         the dev server ~/.ssh/authorized_keys2 file, where ~ is the home directory of ${dev.server.user}. -->

		<scp file="${dist.dir}/${dist.name}-${version}.zip"
      todir="${dev.server.user}@${dev.server.host}:${dev.server.dir}"
      keyfile="${ssh.private.key}"
      passphrase=""
      verbose="true"
      trust="true" />

	</target>

	<target name="extract-dev">
		<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

		<sshexec host="${dev.server.host}" username="${dev.server.user}" keyfile="${ssh.private.key}"
    command="rm -r ${dev.server.dir}/${dist.name}" failonerror="false" trust="true" />
		<sshexec host="${dev.server.host}" username="${dev.server.user}" keyfile="${ssh.private.key}"
    command="unzip ${dev.server.dir}/${dist.name}-${version}.zip -d ${dev.server.dir}" trust="true" />
		<sshexec host="${dev.server.host}" username="${dev.server.user}" keyfile="${ssh.private.key}"
    command="chmod +x ${dev.server.dir}/${dist.name}/scripts/*.sh" trust="true" />
	</target>

	<target name="kill-dev">
		<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

		<!-- Get the PID of the /bin/sh process (.sh file) that launched a java subprocess -->
		<sshexec host="${dev.server.host}" 
      username="${dev.server.user}" 
      keyfile="${ssh.private.key}"
      command="ps -ef | grep -v grep | grep ${dev.server.startup.script} | awk '{ print $2 }'"
      outputproperty="pid.command.output"
      trust="true" />
		<propertyregex property="process.id.of.script" override="true" input="${pid.command.output}" regexp="(\d+)\s*$$" select="\1" />
		<if>
			<equals arg1="${process.id.of.script}" arg2="$${process.id.of.script}" />
			<then>
				<echo>Process not already running</echo>
			</then>
			<else>
				<echo>Killing process ${process.id.of.script}</echo>
				<!-- Kill the java subprocess. This will automatically kill the bin/sh process as well. -->
				<sshexec host="${dev.server.host}" 
            username="${dev.server.user}"
            keyfile="${ssh.private.key}"
            command="ps -ef | awk '$3 == '${process.id.of.script}' { print $2 }' | xargs kill"
            trust="true"/>
			</else>
		</if>
	</target>

	<target name="start-dev">
		<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
		<sshexec host="${dev.server.host}" 
        username="${dev.server.user}" 
        keyfile="${ssh.private.key}"
        command="nohup ${dev.server.dir}/${dist.name}/scripts/${dev.server.startup.script} &gt;${dev.server.dir}/${dist.name}/nohup.log 2&gt;&amp;1 &amp;"
        trust="true" />
	</target>

	<macrodef name="new-hsqldb-db">
		<attribute name="path" />
		<attribute name="scriptDir" />
		<attribute name="catalog" />
		<sequential>
			<taskdef name="dbtool" classname="com.opengamma.util.test.DbTool" classpathref="lib.path.id" />
			<dbtool 
    jdbcUrl="jdbc:hsqldb:file:@{path}" 
    catalog="@{catalog}" 
    user="OpenGamma" 
    password="OpenGamma" 
    drop="true" 
    create="true" 
    createTables="true" 
    dbScriptDir="@{scriptDir}" />
		</sequential>
	</macrodef>

	<available property="dbscript.create" value="${basedir}/create" file="${basedir}/create-db-common.sql" />
	<target name="dbscript-create-db-sql" if="dbscript.create">
		<antcall target="create-db-sql-impl-2">
			<param name="dbscript.prefix" value="create" />
		</antcall>
	</target>
	<available property="dbscript.upgrade" value="${basedir}/upgrade" file="${basedir}/upgrade-db-common.sql" />
	<target name="dbscript-upgrade-db-sql" if="dbscript.upgrade">
		<antcall target="create-db-sql-impl-2">
			<param name="dbscript.prefix" value="upgrade" />
		</antcall>
	</target>
	<target name="create-db-sql-impl" depends="dbscript-create-db-sql,dbscript-upgrade-db-sql" />
	<target name="create-db-sql-impl-2" if="dbscript.prefix">
		<echo>Writing ${basedir}/${dbscript.prefix}-db.sql</echo>
		<concat fixlastline="yes" force="no" destfile="${basedir}/${dbscript.prefix}-db.sql">
			<header filtering="no" trimleading="true">-- IMPORTANT:
        --
        -- This file was generated by concatenating the other .sql files together. It can be
        -- used for testing, but the separate SQL sequences will be necessary if the Security Master
        -- and Position Master need to be installed in different databases.
        --
        -- Please do not modify it - modify the originals and recreate this using 'ant create-db-sql'.

        </header>
			<fileset file="${basedir}/${dbscript.prefix}-db-common.sql" />
			<fileset file="${basedir}/${dbscript.prefix}-db-config.sql" />
			<fileset file="${basedir}/${dbscript.prefix}-db-refdata.sql" />
			<fileset file="${basedir}/${dbscript.prefix}-db-engine.sql" />
			<fileset file="${basedir}/${dbscript.prefix}-db-security.sql" />
			<fileset file="${basedir}/${dbscript.prefix}-db-portfolio.sql" />
			<fileset file="${basedir}/${dbscript.prefix}-db-position.sql" />
			<fileset file="${basedir}/${dbscript.prefix}-db-batch.sql" />
			<fileset file="${basedir}/${dbscript.prefix}-db-timeseries.sql" />
			<fileset file="${basedir}/${dbscript.prefix}-db-historicaltimeseries.sql" />
			<fileset file="${basedir}/${dbscript.prefix}-db-marketdatasnapshot.sql" />
		</concat>
		<fixcrlf file="${basedir}/${dbscript.prefix}-db.sql" />
	</target>

	<target name="create-db-sql" description="--> create a single .sql files from the component ones">
		<delete verbose="true">
			<fileset dir="${basedir}" includes="**/create-db.sql" />
		</delete>

		<subant target="create-db-sql-impl" genericantfile="${basedir}/build.xml">
			<property name="parent.dir" value="${basedir}" />
			<property name="common.dir" value="${common.dir}" />
			<dirset dir="${install.dir}/db" includes="*/patch_*" />
		</subant>
	</target>

	<!-- 
	         ================================= 
	            target: install              
	         ================================= 
	-->
	<target name="install" depends="dist" description="install artifacts to directory specified by property (install.dir)">
		<copy todir="${install.dir}">
			<fileset dir="${dist.dir}/${dist.name}" includes="**" />
		</copy>
		<chmod perm="+x">
			<fileset dir="${install.dir}">
				<include name="**/*.sh" />
			</fileset>
		</chmod>
		<antcall target="clean-dist" />
	</target>

</project>
